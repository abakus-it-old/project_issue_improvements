<?xml version="1.0" encoding="utf-8"?>
<openerp>
    <data>
        <record id="project_issue_email_matching" model="ir.actions.server">
            <field name="name">Project issue email matching</field>
            <field name="model_id" ref="model_project_issue"/>
            <field name="state">code</field>
            <field name="condition">True</field>
            <field name="sequence">5</field>
            <field name="code">projects = pool['project.project'].search(cr, uid, [('active','=',True)])
is_project_found = False
if projects:
    for project in pool['project.project'].browse(cr, uid, projects):
        if project.analytic_account_id.state == 'open' and project.analytic_account_id.partner_id and 'bl' in project.analytic_account_id.name.lower():
            project_emails = []
            for partner in project.analytic_account_id.partner_id.child_ids:
                if partner.email:
                    project_emails.append([partner.email.lower(), partner.id])
            if project.analytic_account_id.partner_id.email:
                project_emails.append([project.analytic_account_id.partner_id.email.lower(), project.analytic_account_id.partner_id.id])        
            for email in project_emails:
                if email[0] in obj.email_from.lower():
                    pool['project.issue'].write(cr,uid,obj.id,{'project_id' : project.id})
                    pool['project.issue'].write(cr,uid,obj.id,{'analytic_account_id' : project.analytic_account_id.id})
                    pool['project.issue'].write(cr,uid,obj.id,{'email_from' : email[0]})
                    pool['project.issue'].write(cr,uid,obj.id,{'partner_id' : email[1]})
                    pool['project.issue'].write(cr,uid,obj.id,{'priority' : '1'})
                    
                    #Project issue - Email matching answer
                    email_template_obj = pool['email.template']
                    template_ids = email_template_obj.search(cr, uid, [('name', '=','Project issue - Email matching answer')], context=context) 
                    if template_ids:
                        values = email_template_obj.generate_email(cr, uid, template_ids[0], obj.id, context=context)
                        #values['subject'] = subject; values['body_html'] = body_html; values['body'] = body_html
                        values['email_to'] = email[0]
                        mail_mail_obj = pool['mail.mail']
                        msg_id = mail_mail_obj.create(cr, uid, values, context=context)
                        if msg_id:
                            mail_mail_obj.send(cr, uid, [msg_id], context=context) 

                    is_project_found = True
                    break
            if is_project_found:
                break</field>
        </record>
        <record id="project_issue_email_matching_and_email_to_SM" model="ir.actions.server">
            <field name="name">Project issue email matching + email to SM</field>
            <field name="model_id" ref="model_project_issue"/>
            <field name="state">code</field>
            <field name="condition">True</field>
            <field name="sequence">5</field>
            <field name="code">projects = pool['project.project'].search(cr, uid, [('active','=',True)])
is_project_found = False
if projects:
    for project in pool['project.project'].browse(cr, uid, projects):
        if project.analytic_account_id.state == 'open' and project.analytic_account_id.partner_id and 'bl' in project.analytic_account_id.name.lower():
            project_emails = []
            for partner in project.analytic_account_id.partner_id.child_ids:
                if partner.email:
                    project_emails.append([partner.email.lower(), partner.id])
            if project.analytic_account_id.partner_id.email:
                project_emails.append([project.analytic_account_id.partner_id.email.lower(), project.analytic_account_id.partner_id.id])        
            for email in project_emails:
                if email[0] in obj.email_from.lower():
                    pool['project.issue'].write(cr,uid,obj.id,{'project_id' : project.id})
                    pool['project.issue'].write(cr,uid,obj.id,{'analytic_account_id' : project.analytic_account_id.id})
                    pool['project.issue'].write(cr,uid,obj.id,{'email_from' : email[0]})
                    pool['project.issue'].write(cr,uid,obj.id,{'partner_id' : email[1]})
                    
                    #Project issue - Email matching answer
                    email_template_obj = pool['email.template']
                    template_ids = email_template_obj.search(cr, uid, [('name', '=','Project issue - Email matching answer')], context=context) 
                    if template_ids:
                        values = email_template_obj.generate_email(cr, uid, template_ids[0], obj.id, context=context)
                        #values['subject'] = subject; values['body_html'] = body_html; values['body'] = body_html
                        values['email_to'] = email[0]
                        mail_mail_obj = pool['mail.mail']
                        msg_id = mail_mail_obj.create(cr, uid, values, context=context)
                        if msg_id:
                            mail_mail_obj.send(cr, uid, [msg_id], context=context) 

                    is_project_found = True
                    break
            if is_project_found:
                break
teams = pool['account.analytic.account.team'].search(cr, uid, [('name','=','SM')])
if teams:
    team = pool['account.analytic.account.team'].browse(cr, uid, teams[0])
    for user in team.users:
        if user.email:
            email_template_obj = pool['email.template']
            template_ids = email_template_obj.search(cr, uid, [('name', '=','Project issue - New issue email to SM')], context=context) 
            if template_ids:
                values = email_template_obj.generate_email(cr, uid, template_ids[0], obj.id, context=context)
                values['email_to'] = user.email
                mail_mail_obj = pool['mail.mail']
                msg_id = mail_mail_obj.create(cr, uid, values, context=context)
                if msg_id:
                    mail_mail_obj.send(cr, uid, [msg_id], context=context)</field>
        </record>
    </data>
</openerp>
